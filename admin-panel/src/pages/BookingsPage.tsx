import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  TextField,
  MenuItem,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
} from '@mui/material';
import {
  Event as EventIcon,
  Schedule as ScheduleIcon,
  Person as PersonIcon,
  LocationOn as LocationIcon,
  Payment as PaymentIcon,
  CheckCircle as CheckIcon,
  Cancel as CancelIcon,
  Pending as PendingIcon,
  CalendarToday as CalendarIcon,
  TrendingUp,
  AccessTime,
  Computer,
  AttachMoney,
  FilterList,
  Refresh,
  Visibility,
  Edit,
  Delete,
} from '@mui/icons-material';
import apiService from '../services/api';
import { Booking, BookingStatus } from '../types';

const BookingsPage: React.FC = () => {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterClub, setFilterClub] = useState('all');

  useEffect(() => {
    const fetchBookings = async () => {
      setLoading(true);
      try {
        const data = await apiService.getBookings(1, 100);
        setBookings(data.items || data); // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      } finally {
        setLoading(false);
      }
    };
    fetchBookings();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case BookingStatus.CONFIRMED: return 'success';
      case BookingStatus.PENDING: return 'warning';
      case BookingStatus.CANCELLED: return 'error';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case BookingStatus.CONFIRMED: return <CheckIcon />;
      case BookingStatus.PENDING: return <PendingIcon />;
      case BookingStatus.CANCELLED: return <CancelIcon />;
      default: return <ScheduleIcon />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case BookingStatus.CONFIRMED: return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case BookingStatus.PENDING: return '–û–∂–∏–¥–∞–µ—Ç';
      case BookingStatus.CANCELLED: return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      default: return status;
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalBookings = bookings.length;
  const confirmedBookings = bookings.filter(b => b.status === BookingStatus.CONFIRMED).length;
  const pendingBookings = bookings.filter(b => b.status === BookingStatus.PENDING).length;
  const totalRevenue = bookings
    .filter(b => b.payments?.some(p => p.status === 'Completed'))
    .reduce((sum, b) => sum + (b.totalAmount || 0), 0);

  // 1. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –∫–ª—É–±—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  const uniqueStatuses = Array.from(new Set(bookings.map(b => b.status))).filter(Boolean);
  const uniqueClubs = Array.from(new Set(bookings.map(b => b.seat?.hall?.club?.name))).filter(Boolean);

  // 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –∫–ª—É–±—É
  const filteredBookings = bookings.filter(booking => {
    const statusMatch = filterStatus === 'all' || booking.status === filterStatus;
    const clubMatch = filterClub === 'all' || booking.seat?.hall?.club?.name === filterClub;
    return statusMatch && clubMatch;
  });

  // 3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatDateTime = (dateStr: string, timeStr: string) => {
    if (!dateStr || !timeStr) return '';
    const dt = new Date(`${dateStr}T${timeStr}`);
    if (isNaN(dt.getTime())) return '';
    return dt.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
  };
  const formatTime = (dateStr: string, timeStr: string) => {
    if (!dateStr || !timeStr) return '';
    const dt = new Date(`${dateStr}T${timeStr}`);
    if (isNaN(dt.getTime())) return '';
    return dt.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  };

  if (loading) {
    return <Box p={3}><Typography>–ó–∞–≥—Ä—É–∑–∫–∞...</Typography></Box>;
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#1976d2', mb: 1 }}>
          üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
        </Typography>
        <Typography variant="subtitle1" sx={{ color: '#666' }}>
          –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å–µ–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#1976d2',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {totalBookings}
                  </Typography>
                  <Typography variant="body2">
                    –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                  </Typography>
                </Box>
                <EventIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#2e7d32',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {confirmedBookings}
                  </Typography>
                  <Typography variant="body2">
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
                  </Typography>
                </Box>
                <CheckIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#ed6c02',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {pendingBookings}
                  </Typography>
                  <Typography variant="body2">
                    –û–∂–∏–¥–∞–µ—Ç
                  </Typography>
                </Box>
                <PendingIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#9c27b0',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    ‚Ç∏{(totalRevenue / 1000).toFixed(0)}K
                  </Typography>
                  <Typography variant="body2">
                    –î–æ—Ö–æ–¥
                  </Typography>
                </Box>
                <AttachMoney sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Grid container spacing={3}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
        <Grid item xs={12} lg={8}>
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <Card sx={{ borderRadius: 2, mb: 3 }}>
            <CardContent>
              <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
                <Typography variant="h6" sx={{ fontWeight: 'bold', mr: 2 }}>
                  üîç –§–∏–ª—å—Ç—Ä—ã
                </Typography>
                
                <TextField
                  select
                  size="small"
                  label="–°—Ç–∞—Ç—É—Å"
                  value={filterStatus}
                  onChange={e => setFilterStatus(e.target.value)}
                  sx={{ minWidth: 150 }}
                >
                  <MenuItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                  {uniqueStatuses.map(status => (
                    <MenuItem key={status} value={status}>{status}</MenuItem>
                  ))}
                </TextField>

                <TextField
                  select
                  size="small"
                  label="–ö–ª—É–±"
                  value={filterClub}
                  onChange={e => setFilterClub(e.target.value)}
                  sx={{ minWidth: 200 }}
                >
                  <MenuItem value="all">–í—Å–µ –∫–ª—É–±—ã</MenuItem>
                  {uniqueClubs.map(club => (
                    <MenuItem key={club} value={club}>{club}</MenuItem>
                  ))}
                </TextField>

                <Button
                  variant="outlined"
                  startIcon={<FilterList />}
                  onClick={() => {
                    setFilterStatus('all');
                    setFilterClub('all');
                  }}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å
                </Button>
              </Box>
            </CardContent>
          </Card>

          {/* –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */}
          <Card sx={{ borderRadius: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
                üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
              </Typography>
              
              <TableContainer component={Paper}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableCell>
                      <TableCell>–ö–ª—É–±/–ó–∞–ª</TableCell>
                      <TableCell>–í—Ä–µ–º—è</TableCell>
                      <TableCell>–ú–µ—Å—Ç–æ</TableCell>
                      <TableCell>–°—Ç–æ–∏–º–æ—Å—Ç—å</TableCell>
                      <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                      <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {filteredBookings.map((booking) => (
                      <TableRow 
                        key={booking.id}
                        sx={{ '&:hover': { backgroundColor: '#f5f5f5' } }}
                      >
                        <TableCell>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                            <Avatar sx={{ width: 40, height: 40 }}>
                              {booking.user?.fullName ? booking.user.fullName[0] : '?'}
                            </Avatar>
                            <Box>
                              <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                                {booking.user?.fullName || ''}
                              </Typography>
                              {/* booking.gameType —É–¥–∞–ª—ë–Ω, —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç */}
                            </Box>
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Box>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {booking.seat?.hall?.club?.name || ''}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {booking.seat?.hall?.name || ''}
                            </Typography>
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Box>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {formatDateTime(booking.createdAt, booking.startTime)}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {formatTime(booking.createdAt, booking.startTime)} - {formatTime(booking.createdAt, booking.endTime)}
                            </Typography>
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Chip 
                            label={`–ú–µ—Å—Ç–æ ${booking.seat?.seatNumber || booking.seat?.id || ''}`}
                            variant="outlined"
                            size="small"
                            icon={<Computer />}
                          />
                        </TableCell>
                        
                        <TableCell>
                          <Typography variant="body2" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
                            ‚Ç∏{(booking.totalAmount || 0).toLocaleString()}
                          </Typography>
                        </TableCell>
                        
                        <TableCell>
                          <Chip
                            icon={getStatusIcon(booking.status)}
                            label={getStatusText(booking.status)}
                            color={getStatusColor(booking.status)}
                            size="small"
                          />
                        </TableCell>
                        
                        <TableCell>
                          <Box sx={{ display: 'flex', gap: 1 }}>
                            <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                              <IconButton size="small" sx={{ color: '#1976d2' }} onClick={() => alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #${booking.id}`)}>
                                <Visibility fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                              <IconButton size="small" sx={{ color: '#ed6c02' }} onClick={() => alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${booking.id}`)}>
                                <Edit fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                              <IconButton size="small" sx={{ color: '#d32f2f' }} onClick={() => alert(`–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${booking.id}`)}>
                                <Delete fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </Grid>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <Grid item xs={12} lg={4}>
          {/* –ù–µ–¥–∞–≤–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <Card sx={{ borderRadius: 2, mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
                üïí –ù–µ–¥–∞–≤–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              </Typography>
              
              <List sx={{ p: 0 }}>
                {bookings.slice(0, 5).map((booking, index) => (
                  <React.Fragment key={booking.id}>
                    <ListItem sx={{ px: 0 }}>
                      <ListItemAvatar>
                        <Avatar sx={{ width: 36, height: 36 }}>
                          {booking.user?.fullName ? booking.user.fullName[0] : '?'}
                        </Avatar>
                      </ListItemAvatar>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {booking.user?.fullName || ''}
                            </Typography>
                            <Chip
                              label={getStatusText(booking.status)}
                              color={getStatusColor(booking.status)}
                              size="small"
                              sx={{ height: 20, fontSize: '10px' }}
                            />
                          </Box>
                        }
                        secondary={
                          <Box>
                            <Typography variant="caption" color="text.secondary">
                              {booking.seat?.hall?.club?.name || ''} ‚Ä¢ ‚Ç∏{(booking.totalAmount || 0).toLocaleString()}
                            </Typography>
                            <br />
                            <Typography variant="caption" color="text.secondary">
                              {formatTime(booking.createdAt, booking.startTime)}
                            </Typography>
                          </Box>
                        }
                      />
                    </ListItem>
                    {index < 4 && <Divider />}
                  </React.Fragment>
                ))}
              </List>
            </CardContent>
          </Card>

          {/* –¢–æ–ø –∫–ª—É–±—ã */}
          <Card sx={{ borderRadius: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
                üèÜ –¢–æ–ø –∫–ª—É–±—ã –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
              </Typography>
              
              <List sx={{ p: 0 }}>
                {[
                  { name: 'CyberArena Almaty', bookings: 3, revenue: 9300 },
                  { name: 'GameZone Astana', bookings: 1, revenue: 5400 },
                  { name: 'ProGaming Shymkent', bookings: 1, revenue: 3600 },
                ].map((club, index) => (
                  <React.Fragment key={club.name}>
                    <ListItem sx={{ px: 0 }}>
                      <ListItemAvatar>
                        <Avatar sx={{ 
                          backgroundColor: index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : '#cd7f32',
                          color: 'white',
                          fontWeight: 'bold',
                          width: 32,
                          height: 32,
                        }}>
                          {index + 1}
                        </Avatar>
                      </ListItemAvatar>
                      <ListItemText
                        primary={club.name}
                        secondary={`${club.bookings} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ‚Ä¢ ‚Ç∏${club.revenue.toLocaleString()}`}
                      />
                    </ListItem>
                    {index < 2 && <Divider />}
                  </React.Fragment>
                ))}
              </List>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default BookingsPage;
