import React, { useState } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  TextField,
  MenuItem,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  Switch,
  FormControlLabel,
  Badge,
} from '@mui/material';
import {
  Notifications as NotificationsIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Send as SendIcon,
  Email as EmailIcon,
  Sms as SmsIcon,
  NotificationsActive as PushIcon,
  Schedule as ScheduleIcon,
  CheckCircle as CheckIcon,
  Cancel as CancelIcon,
  Pending as PendingIcon,
  Visibility,
  VisibilityOff,
  FilterList,
  Person,
  Group,
  Public,
  AccessTime,
  CalendarToday,
  TrendingUp,
} from '@mui/icons-material';

const NotificationsPage: React.FC = () => {
  const [filterType, setFilterType] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notifications = [
    {
      id: 1,
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!',
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–ª—É–±–æ–≤.',
      type: 'email',
      status: 'sent',
      recipients: 156,
      openRate: 78,
      createdAt: new Date(2024, 11, 26, 14, 30),
      sentAt: new Date(2024, 11, 26, 14, 35),
      targetAudience: 'new_users',
      template: 'welcome',
    },
    {
      id: 2,
      title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      message: '–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ CyberArena Almaty –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞ 26.12.2024 –≤ 18:00',
      type: 'sms',
      status: 'sent',
      recipients: 23,
      openRate: 95,
      createdAt: new Date(2024, 11, 26, 12, 15),
      sentAt: new Date(2024, 11, 26, 12, 16),
      targetAudience: 'booking_confirmed',
      template: 'booking_confirmation',
    },
    {
      id: 3,
      title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      message: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.',
      type: 'push',
      status: 'scheduled',
      recipients: 234,
      openRate: 0,
      createdAt: new Date(2024, 11, 26, 10, 0),
      sentAt: new Date(2024, 11, 27, 9, 0),
      targetAudience: 'active_users',
      template: 'promotion',
    },
    {
      id: 4,
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏',
      message: '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.',
      type: 'push',
      status: 'sent',
      recipients: 45,
      openRate: 88,
      createdAt: new Date(2024, 11, 25, 17, 0),
      sentAt: new Date(2024, 11, 25, 17, 0),
      targetAudience: 'booking_reminder',
      template: 'reminder',
    },
    {
      id: 5,
      title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
      message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã 28.12.2024 —Å 02:00 –¥–æ 04:00',
      type: 'email',
      status: 'draft',
      recipients: 0,
      openRate: 0,
      createdAt: new Date(2024, 11, 26, 16, 0),
      sentAt: null,
      targetAudience: 'all_users',
      template: 'maintenance',
    },
  ];

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'email': return 'primary';
      case 'sms': return 'success';
      case 'push': return 'warning';
      default: return 'default';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'sent': return 'success';
      case 'scheduled': return 'warning';
      case 'draft': return 'default';
      case 'failed': return 'error';
      default: return 'default';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'email': return <EmailIcon />;
      case 'sms': return <SmsIcon />;
      case 'push': return <PushIcon />;
      default: return <NotificationsIcon />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'sent': return <CheckIcon />;
      case 'scheduled': return <ScheduleIcon />;
      case 'draft': return <EditIcon />;
      case 'failed': return <CancelIcon />;
      default: return <PendingIcon />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
      case 'scheduled': return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'failed': return '–û—à–∏–±–∫–∞';
      default: return status;
    }
  };

  const getTypeText = (type: string) => {
    switch (type) {
      case 'email': return 'Email';
      case 'sms': return 'SMS';
      case 'push': return 'Push';
      default: return type;
    }
  };

  const getAudienceText = (audience: string) => {
    switch (audience) {
      case 'all_users': return '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
      case 'new_users': return '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
      case 'active_users': return '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
      case 'booking_confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';
      case 'booking_reminder': return '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏';
      default: return audience;
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalNotifications = notifications.length;
  const sentNotifications = notifications.filter(n => n.status === 'sent').length;
  const scheduledNotifications = notifications.filter(n => n.status === 'scheduled').length;
  const draftNotifications = notifications.filter(n => n.status === 'draft').length;

  const totalRecipients = notifications
    .filter(n => n.status === 'sent')
    .reduce((sum, n) => sum + n.recipients, 0);

  const averageOpenRate = notifications
    .filter(n => n.status === 'sent' && n.openRate > 0)
    .reduce((sum, n, _, arr) => sum + n.openRate / arr.length, 0);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredNotifications = notifications.filter(notification => {
    const typeMatch = filterType === 'all' || notification.type === filterType;
    const statusMatch = filterStatus === 'all' || notification.status === filterStatus;
    return typeMatch && statusMatch;
  });

  const formatDateTime = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#1976d2', mb: 1 }}>
          üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        </Typography>
        <Typography variant="subtitle1" sx={{ color: '#666' }}>
          –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#1976d2',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {totalNotifications}
                  </Typography>
                  <Typography variant="body2">
                    –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                    <TrendingUp sx={{ fontSize: 16, mr: 0.5 }} />
                    <Typography variant="caption">+5 –∑–∞ –Ω–µ–¥–µ–ª—é</Typography>
                  </Box>
                </Box>
                <NotificationsIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#2e7d32',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {sentNotifications}
                  </Typography>
                  <Typography variant="body2">
                    –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                    <Typography variant="caption">
                      {totalRecipients} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    </Typography>
                  </Box>
                </Box>
                <CheckIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#ed6c02',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {scheduledNotifications}
                  </Typography>
                  <Typography variant="body2">
                    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                    <AccessTime sx={{ fontSize: 16, mr: 0.5 }} />
                    <Typography variant="caption">–û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</Typography>
                  </Box>
                </Box>
                <ScheduleIcon sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ 
            backgroundColor: '#9c27b0',
            color: 'white',
            borderRadius: 2,
          }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {averageOpenRate.toFixed(0)}%
                  </Typography>
                  <Typography variant="body2">
                    –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç–∏–π
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                    <Typography variant="caption">
                      –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {draftNotifications}
                    </Typography>
                  </Box>
                </Box>
                <Visibility sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Grid container spacing={3}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
        <Grid item xs={12} lg={8}>
          {/* –§–∏–ª—å—Ç—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card sx={{ borderRadius: 2, mb: 3 }}>
            <CardContent>
              <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
                <Typography variant="h6" sx={{ fontWeight: 'bold', mr: 2 }}>
                  üîç –§–∏–ª—å—Ç—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
                </Typography>
                
                <TextField
                  select
                  size="small"
                  label="–¢–∏–ø"
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  sx={{ minWidth: 120 }}
                >
                  <MenuItem value="all">–í—Å–µ —Ç–∏–ø—ã</MenuItem>
                  <MenuItem value="email">Email</MenuItem>
                  <MenuItem value="sms">SMS</MenuItem>
                  <MenuItem value="push">Push</MenuItem>
                </TextField>

                <TextField
                  select
                  size="small"
                  label="–°—Ç–∞—Ç—É—Å"
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                  sx={{ minWidth: 150 }}
                >
                  <MenuItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                  <MenuItem value="sent">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</MenuItem>
                  <MenuItem value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</MenuItem>
                  <MenuItem value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</MenuItem>
                  <MenuItem value="failed">–û—à–∏–±–∫–∞</MenuItem>
                </TextField>

                <Button
                  variant="outlined"
                  startIcon={<FilterList />}
                  onClick={() => {
                    setFilterType('all');
                    setFilterStatus('all');
                  }}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å
                </Button>

                <Button
                  variant="contained"
                  startIcon={<AddIcon />}
                  sx={{ ml: 'auto' }}
                >
                  –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                </Button>
              </Box>
            </CardContent>
          </Card>

          {/* –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <Card sx={{ borderRadius: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
                üì¢ –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({filteredNotifications.length})
              </Typography>
              
              <TableContainer component={Paper}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</TableCell>
                      <TableCell>–¢–∏–ø</TableCell>
                      <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                      <TableCell>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏</TableCell>
                      <TableCell>–û—Ç–∫—Ä—ã—Ç–∏–π</TableCell>
                      <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {filteredNotifications.map((notification) => (
                      <TableRow 
                        key={notification.id}
                        sx={{ '&:hover': { backgroundColor: '#f5f5f5' } }}
                      >
                        <TableCell>
                          <Box>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {notification.title}
                            </Typography>
                            <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 0.5 }}>
                              {notification.message.length > 60 
                                ? `${notification.message.substring(0, 60)}...` 
                                : notification.message}
                            </Typography>
                            <Typography variant="caption" color="primary">
                              {getAudienceText(notification.targetAudience)}
                            </Typography>
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Chip
                            icon={getTypeIcon(notification.type)}
                            label={getTypeText(notification.type)}
                            color={getTypeColor(notification.type)}
                            size="small"
                          />
                        </TableCell>
                        
                        <TableCell>
                          <Chip
                            icon={getStatusIcon(notification.status)}
                            label={getStatusText(notification.status)}
                            color={getStatusColor(notification.status)}
                            size="small"
                          />
                        </TableCell>
                        
                        <TableCell>
                          <Box>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {notification.recipients === 0 ? '-' : notification.recipients.toLocaleString()}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {notification.sentAt ? formatDateTime(notification.sentAt) : '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}
                            </Typography>
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Box>
                            <Typography variant="body2" sx={{ 
                              fontWeight: 'bold',
                              color: notification.openRate > 80 ? '#2e7d32' : notification.openRate > 50 ? '#ed6c02' : '#d32f2f'
                            }}>
                              {notification.openRate === 0 ? '-' : `${notification.openRate}%`}
                            </Typography>
                            {notification.openRate > 0 && (
                              <Typography variant="caption" color="text.secondary">
                                {Math.round(notification.recipients * notification.openRate / 100)} –æ—Ç–∫—Ä—ã—Ç–∏–π
                              </Typography>
                            )}
                          </Box>
                        </TableCell>
                        
                        <TableCell>
                          <Box sx={{ display: 'flex', gap: 1 }}>
                            <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                              <IconButton size="small" sx={{ color: '#1976d2' }}>
                                <Visibility fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                              <IconButton size="small" sx={{ color: '#ed6c02' }}>
                                <EditIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            {notification.status === 'draft' && (
                              <Tooltip title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
                                <IconButton size="small" sx={{ color: '#2e7d32' }}>
                                  <SendIcon fontSize="small" />
                                </IconButton>
                              </Tooltip>
                            )}
                            <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                              <IconButton size="small" sx={{ color: '#d32f2f' }}>
                                <DeleteIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </Grid>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <Grid item xs={12} lg={4}>
          {/* –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <Card sx={{ borderRadius: 2, mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 3 }}>
                üì® –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </Typography>

              <List sx={{ p: 0 }}>
                {[
                  { type: 'email', name: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: notifications.filter(n => n.type === 'email').length, color: '#1976d2' },
                  { type: 'sms', name: 'SMS —Å–æ–æ–±—â–µ–Ω–∏—è', count: notifications.filter(n => n.type === 'sms').length, color: '#2e7d32' },
                  { type: 'push', name: 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: notifications.filter(n => n.type === 'push').length, color: '#ed6c02' },
                ].map((type, index) => (
                  <React.Fragment key={type.type}>
                    <ListItem sx={{ px: 0, py: 2 }}>
                      <ListItemAvatar sx={{ minWidth: 36 }}>
                        <Box
                          sx={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: 32,
                            height: 32,
                            borderRadius: '50%',
                            backgroundColor: type.color,
                            color: 'white',
                          }}
                        >
                          {getTypeIcon(type.type)}
                        </Box>
                      </ListItemAvatar>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {type.name}
                            </Typography>
                            <Typography variant="body2" sx={{ color: type.color }}>
                              {type.count}
                            </Typography>
                          </Box>
                        }
                        secondary={`${((type.count / totalNotifications) * 100).toFixed(0)}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞`}
                      />
                    </ListItem>
                    {index < 2 && <Divider />}
                  </React.Fragment>
                ))}
              </List>
            </CardContent>
          </Card>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card sx={{ borderRadius: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 3 }}>
                ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
              </Typography>

              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<AddIcon />}
                    sx={{ justifyContent: 'flex-start' }}
                  >
                    –°–æ–∑–¥–∞—Ç—å Email –∫–∞–º–ø–∞–Ω–∏—é
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<SmsIcon />}
                    sx={{ justifyContent: 'flex-start' }}
                  >
                    –ú–∞—Å—Å–æ–≤–∞—è SMS —Ä–∞—Å—Å—ã–ª–∫–∞
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<PushIcon />}
                    sx={{ justifyContent: 'flex-start' }}
                  >
                    Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Button
                    variant="outlined"
                    fullWidth
                    startIcon={<ScheduleIcon />}
                    sx={{ justifyContent: 'flex-start' }}
                  >
                    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
                  </Button>
                </Grid>
              </Grid>

              <Divider sx={{ my: 3 }} />

              <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 2 }}>
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <FormControlLabel
                  control={<Switch defaultChecked size="small" />}
                  label={<Typography variant="caption">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</Typography>}
                />
                <FormControlLabel
                  control={<Switch defaultChecked size="small" />}
                  label={<Typography variant="caption">Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Typography>}
                />
                <FormControlLabel
                  control={<Switch size="small" />}
                  label={<Typography variant="caption">SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Typography>}
                />
                <FormControlLabel
                  control={<Switch defaultChecked size="small" />}
                  label={<Typography variant="caption">Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Typography>}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default NotificationsPage;
